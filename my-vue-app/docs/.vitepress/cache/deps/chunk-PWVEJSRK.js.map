{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/mermaid@10.9.0/node_modules/mermaid/dist/createText-f6615236.js"],
  "sourcesContent": ["import { b8 as dedent, l as log, b7 as decodeEntities } from \"./mermaid-c5809711.js\";\nconst emptyOptions = {};\nfunction toString(value, options) {\n  const settings = options || emptyOptions;\n  const includeImageAlt = typeof settings.includeImageAlt === \"boolean\" ? settings.includeImageAlt : true;\n  const includeHtml = typeof settings.includeHtml === \"boolean\" ? settings.includeHtml : true;\n  return one(value, includeImageAlt, includeHtml);\n}\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if (\"value\" in value) {\n      return value.type === \"html\" && !includeHtml ? \"\" : value.value;\n    }\n    if (includeImageAlt && \"alt\" in value && value.alt) {\n      return value.alt;\n    }\n    if (\"children\" in value) {\n      return all(value.children, includeImageAlt, includeHtml);\n    }\n  }\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml);\n  }\n  return \"\";\n}\nfunction all(values, includeImageAlt, includeHtml) {\n  const result = [];\n  let index2 = -1;\n  while (++index2 < values.length) {\n    result[index2] = one(values[index2], includeImageAlt, includeHtml);\n  }\n  return result.join(\"\");\n}\nfunction node(value) {\n  return Boolean(value && typeof value === \"object\");\n}\nfunction splice(list2, start, remove, items) {\n  const end = list2.length;\n  let chunkStart = 0;\n  let parameters;\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n  if (items.length < 1e4) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    list2.splice(...parameters);\n  } else {\n    if (remove)\n      list2.splice(start, remove);\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 1e4);\n      parameters.unshift(start, 0);\n      list2.splice(...parameters);\n      chunkStart += 1e4;\n      start += 1e4;\n    }\n  }\n}\nfunction push(list2, items) {\n  if (list2.length > 0) {\n    splice(list2, list2.length, 0, items);\n    return list2;\n  }\n  return items;\n}\nconst hasOwnProperty = {}.hasOwnProperty;\nfunction combineExtensions(extensions) {\n  const all2 = {};\n  let index2 = -1;\n  while (++index2 < extensions.length) {\n    syntaxExtension(all2, extensions[index2]);\n  }\n  return all2;\n}\nfunction syntaxExtension(all2, extension2) {\n  let hook;\n  for (hook in extension2) {\n    const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;\n    const left = maybe || (all2[hook] = {});\n    const right = extension2[hook];\n    let code;\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code))\n          left[code] = [];\n        const value = right[code];\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        );\n      }\n    }\n  }\n}\nfunction constructs(existing, list2) {\n  let index2 = -1;\n  const before = [];\n  while (++index2 < list2.length) {\n    (list2[index2].add === \"after\" ? existing : before).push(list2[index2]);\n  }\n  splice(existing, 0, 0, before);\n}\nconst unicodePunctuationRegex = /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\nconst asciiAlpha = regexCheck(/[A-Za-z]/);\nconst asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\nconst asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\nfunction asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\nconst asciiDigit = regexCheck(/\\d/);\nconst asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\nconst asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\nfunction markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\nfunction markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\nfunction markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\nconst unicodePunctuation = regexCheck(unicodePunctuationRegex);\nconst unicodeWhitespace = regexCheck(/\\s/);\nfunction regexCheck(regex) {\n  return check;\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code));\n  }\n}\nfunction factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}\nconst content$1 = {\n  tokenize: initializeContent\n};\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  );\n  let previous2;\n  return contentStart;\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous: previous2\n    });\n    if (previous2) {\n      previous2.next = token;\n    }\n    previous2 = token;\n    return data(code);\n  }\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n    effects.consume(code);\n    return data;\n  }\n}\nconst document$2 = {\n  tokenize: initializeDocument\n};\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\nfunction initializeDocument(effects) {\n  const self = this;\n  const stack = [];\n  let continued = 0;\n  let childFlow;\n  let childToken;\n  let lineStartOffset;\n  return start;\n  function start(code) {\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code);\n    }\n    return checkNewContainers(code);\n  }\n  function documentContinue(code) {\n    continued++;\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = void 0;\n      if (childFlow) {\n        closeFlow();\n      }\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      let point2;\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point2 = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n      let index2 = indexBeforeExits;\n      while (index2 < self.events.length) {\n        self.events[index2][1].end = Object.assign({}, point2);\n        index2++;\n      }\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      );\n      self.events.length = index2;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n  function checkNewContainers(code) {\n    if (continued === stack.length) {\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      );\n    }\n    self.containerState = {};\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code);\n  }\n  function thereIsANewContainer(code) {\n    if (childFlow)\n      closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n  function documentContinued(code) {\n    self.containerState = {};\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code);\n  }\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    return documentContinued(code);\n  }\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow)\n        closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      contentType: \"flow\",\n      previous: childToken,\n      _tokenizer: childFlow\n    });\n    return flowContinue(code);\n  }\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      continued = 0;\n      self.interrupt = void 0;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token);\n    if (eof)\n      stream.push(null);\n    token.previous = childToken;\n    if (childToken)\n      childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n    if (self.parser.lazy[token.start.line]) {\n      let index2 = childFlow.events.length;\n      while (index2--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index2][1].end || // …or ends after it.\n          childFlow.events[index2][1].end.offset > lineStartOffset)\n        ) {\n          return;\n        }\n      }\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      let seen;\n      let point2;\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === \"exit\" && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point2 = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n      index2 = indexBeforeExits;\n      while (index2 < self.events.length) {\n        self.events[index2][1].end = Object.assign({}, point2);\n        index2++;\n      }\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      );\n      self.events.length = index2;\n    }\n  }\n  function exitContainers(size) {\n    let index2 = stack.length;\n    while (index2-- > size) {\n      const entry = stack[index2];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = void 0;\n    childFlow = void 0;\n    self.containerState._closeFlow = void 0;\n  }\n}\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    \"linePrefix\",\n    this.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4\n  );\n}\nfunction classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}\nfunction resolveAll(constructs2, events, context) {\n  const called = [];\n  let index2 = -1;\n  while (++index2 < constructs2.length) {\n    const resolve = constructs2[index2].resolveAll;\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context);\n      called.push(resolve);\n    }\n  }\n  return events;\n}\nconst attention = {\n  name: \"attention\",\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n};\nfunction resolveAllAttention(events, context) {\n  let index2 = -1;\n  let open;\n  let group;\n  let text2;\n  let openingSequence;\n  let closingSequence;\n  let use;\n  let nextEvents;\n  let offset;\n  while (++index2 < events.length) {\n    if (events[index2][0] === \"enter\" && events[index2][1].type === \"attentionSequence\" && events[index2][1]._close) {\n      open = index2;\n      while (open--) {\n        if (events[open][0] === \"exit\" && events[open][1].type === \"attentionSequence\" && events[open][1]._open && // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {\n          if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {\n            continue;\n          }\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;\n          const start = Object.assign({}, events[open][1].end);\n          const end = Object.assign({}, events[index2][1].start);\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: Object.assign({}, events[open][1].end)\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: Object.assign({}, events[index2][1].start),\n            end\n          };\n          text2 = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index2][1].start)\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          };\n          events[open][1].end = Object.assign({}, openingSequence.start);\n          events[index2][1].start = Object.assign({}, closingSequence.end);\n          nextEvents = [];\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              [\"enter\", events[open][1], context],\n              [\"exit\", events[open][1], context]\n            ]);\n          }\n          nextEvents = push(nextEvents, [\n            [\"enter\", group, context],\n            [\"enter\", openingSequence, context],\n            [\"exit\", openingSequence, context],\n            [\"enter\", text2, context]\n          ]);\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index2),\n              context\n            )\n          );\n          nextEvents = push(nextEvents, [\n            [\"exit\", text2, context],\n            [\"enter\", closingSequence, context],\n            [\"exit\", closingSequence, context],\n            [\"exit\", group, context]\n          ]);\n          if (events[index2][1].end.offset - events[index2][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [\n              [\"enter\", events[index2][1], context],\n              [\"exit\", events[index2][1], context]\n            ]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index2 - open + 3, nextEvents);\n          index2 = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n  index2 = -1;\n  while (++index2 < events.length) {\n    if (events[index2][1].type === \"attentionSequence\") {\n      events[index2][1].type = \"data\";\n    }\n  }\n  return events;\n}\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;\n  const previous2 = this.previous;\n  const before = classifyCharacter(previous2);\n  let marker;\n  return start;\n  function start(code) {\n    marker = code;\n    effects.enter(\"attentionSequence\");\n    return inside(code);\n  }\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit(\"attentionSequence\");\n    const after = classifyCharacter(code);\n    const open = !after || after === 2 && before || attentionMarkers2.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers2.includes(previous2);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\nfunction movePoint(point2, offset) {\n  point2.column += offset;\n  point2.offset += offset;\n  point2._bufferIndex += offset;\n}\nconst autolink = {\n  name: \"autolink\",\n  tokenize: tokenizeAutolink\n};\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    return emailAtext(code);\n  }\n  function schemeOrEmailAtext(code) {\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}\nconst blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\nconst blockQuote = {\n  name: \"blockQuote\",\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        contBefore,\n        \"linePrefix\",\n        self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4\n      )(code);\n    }\n    return contBefore(code);\n  }\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}\nconst characterEscape = {\n  name: \"characterEscape\",\n  tokenize: tokenizeCharacterEscape\n};\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n  function inside(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\nconst element = document.createElement(\"i\");\nfunction decodeNamedCharacterReference(value) {\n  const characterReference2 = \"&\" + value + \";\";\n  element.innerHTML = characterReference2;\n  const char = element.textContent;\n  if (char.charCodeAt(char.length - 1) === 59 && value !== \"semi\") {\n    return false;\n  }\n  return char === characterReference2 ? false : char;\n}\nconst characterReference = {\n  name: \"characterReference\",\n  tokenize: tokenizeCharacterReference\n};\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let max;\n  let test;\n  return start;\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n};\nconst codeFenced = {\n  name: \"codeFenced\",\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n};\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  let marker;\n  return start;\n  function start(code) {\n    return beforeSequenceOpen(code);\n  }\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(\n      effects,\n      beforeContentChunk,\n      \"linePrefix\",\n      initialPrefix + 1\n    )(code) : beforeContentChunk(code);\n  }\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n  function tokenizeCloseStart(effects2, ok2, nok2) {\n    let size = 0;\n    return startBefore;\n    function startBefore(code) {\n      effects2.enter(\"lineEnding\");\n      effects2.consume(code);\n      effects2.exit(\"lineEnding\");\n      return start2;\n    }\n    function start2(code) {\n      effects2.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(\n        effects2,\n        beforeSequenceClose,\n        \"linePrefix\",\n        self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4\n      )(code) : beforeSequenceClose(code);\n    }\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects2.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok2(code);\n    }\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects2.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects2.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects2, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok2(code);\n    }\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects2.exit(\"codeFencedFence\");\n        return ok2(code);\n      }\n      return nok2(code);\n    }\n  }\n}\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\nconst codeIndented = {\n  name: \"codeIndented\",\n  tokenize: tokenizeCodeIndented\n};\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    effects.enter(\"codeIndented\");\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    return ok(code);\n  }\n}\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart2;\n  function furtherStart2(code) {\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart2;\n    }\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart2(code) : nok(code);\n  }\n}\nconst codeText = {\n  name: \"codeText\",\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  let index2;\n  let enter;\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === \"space\") && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === \"space\")) {\n    index2 = headEnterIndex;\n    while (++index2 < tailExitIndex) {\n      if (events[index2][1].type === \"codeTextData\") {\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n  index2 = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index2 <= tailExitIndex) {\n    if (enter === void 0) {\n      if (index2 !== tailExitIndex && events[index2][1].type !== \"lineEnding\") {\n        enter = index2;\n      }\n    } else if (index2 === tailExitIndex || events[index2][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index2 !== enter + 2) {\n        events[enter][1].end = events[index2 - 1][1].end;\n        events.splice(enter + 2, index2 - enter - 2);\n        tailExitIndex -= index2 - enter - 2;\n        index2 = enter + 2;\n      }\n      enter = void 0;\n    }\n  }\n  return events;\n}\nfunction previous(code) {\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\nfunction tokenizeCodeText(effects, ok, nok) {\n  let sizeOpen = 0;\n  let size;\n  let token;\n  return start;\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n  function between(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 32) {\n      effects.enter(\"space\");\n      effects.consume(code);\n      effects.exit(\"space\");\n      return between;\n    }\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n  function sequenceClose(code) {\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}\nfunction subtokenize(events) {\n  const jumps = {};\n  let index2 = -1;\n  let event;\n  let lineIndex;\n  let otherIndex;\n  let otherEvent;\n  let parameters;\n  let subevents;\n  let more;\n  while (++index2 < events.length) {\n    while (index2 in jumps) {\n      index2 = jumps[index2];\n    }\n    event = events[index2];\n    if (index2 && event[1].type === \"chunkFlow\" && events[index2 - 1][1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n    if (event[0] === \"enter\") {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index2));\n        index2 = jumps[index2];\n        more = true;\n      }\n    } else if (event[1]._container) {\n      otherIndex = index2;\n      lineIndex = void 0;\n      while (otherIndex--) {\n        otherEvent = events[otherIndex];\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === \"enter\") {\n            if (lineIndex) {\n              events[lineIndex][1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        event[1].end = Object.assign({}, events[lineIndex][1].start);\n        parameters = events.slice(lineIndex, index2);\n        parameters.unshift(event);\n        splice(events, lineIndex, index2 - lineIndex + 1, parameters);\n      }\n    }\n  }\n  return !more;\n}\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1];\n  const context = events[eventIndex][2];\n  let startPosition = eventIndex - 1;\n  const startPositions = [];\n  const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);\n  const childEvents = tokenizer.events;\n  const jumps = [];\n  const gaps = {};\n  let stream;\n  let previous2;\n  let index2 = -1;\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n  while (current) {\n    while (events[++startPosition][1] !== current) {\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous2) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = void 0;\n      }\n    }\n    previous2 = current;\n    current = current.next;\n  }\n  current = token;\n  while (++index2 < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index2][0] === \"exit\" && childEvents[index2 - 1][0] === \"enter\" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line\n    ) {\n      start = index2 + 1;\n      breaks.push(start);\n      current._tokenizer = void 0;\n      current.previous = void 0;\n      current = current.next;\n    }\n  }\n  tokenizer.events = [];\n  if (current) {\n    current._tokenizer = void 0;\n    current.previous = void 0;\n  } else {\n    breaks.pop();\n  }\n  index2 = breaks.length;\n  while (index2--) {\n    const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);\n    const start2 = startPositions.pop();\n    jumps.unshift([start2, start2 + slice.length - 1]);\n    splice(events, start2, 2, slice);\n  }\n  index2 = -1;\n  while (++index2 < jumps.length) {\n    gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];\n    adjust += jumps[index2][1] - jumps[index2][0] - 1;\n  }\n  return gaps;\n}\nconst content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n};\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n};\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\nfunction tokenizeContent(effects, ok) {\n  let previous2;\n  return chunkStart;\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous2 = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code);\n    }\n    effects.consume(code);\n    return chunkInside;\n  }\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous2.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous: previous2\n    });\n    previous2 = previous2.next;\n    return chunkInside;\n  }\n}\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes(\"codeIndented\") && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}\nfunction factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}\nfunction factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  let seen;\n  return start;\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen || // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && \"_hiddenFootnoteSupport\" in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen)\n      seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}\nfunction factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  let marker;\n  return start;\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}\nfunction factoryWhitespace(effects, ok) {\n  let seen;\n  return start;\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? \"linePrefix\" : \"lineSuffix\"\n      )(code);\n    }\n    return ok(code);\n  }\n}\nfunction normalizeIdentifier(value) {\n  return value.replace(/[\\t\\n\\r ]+/g, \" \").replace(/^ | $/g, \"\").toLowerCase().toUpperCase();\n}\nconst definition = {\n  name: \"definition\",\n  tokenize: tokenizeDefinition\n};\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  let identifier;\n  return start;\n  function start(code) {\n    effects.enter(\"definition\");\n    return before(code);\n  }\n  function before(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      \"definitionLabel\",\n      \"definitionLabelMarker\",\n      \"definitionLabelString\"\n    )(code);\n  }\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    );\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n  function markerAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      \"definitionDestination\",\n      \"definitionDestinationLiteral\",\n      \"definitionDestinationLiteralMarker\",\n      \"definitionDestinationRaw\",\n      \"definitionDestinationString\"\n    )(code);\n  }\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n      self.parser.defined.push(identifier);\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore2;\n  function titleBefore2(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      \"definitionTitle\",\n      \"definitionTitleMarker\",\n      \"definitionTitleString\"\n    )(code);\n  }\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}\nconst hardBreakEscape = {\n  name: \"hardBreakEscape\",\n  tokenize: tokenizeHardBreakEscape\n};\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\nconst headingAtx = {\n  name: \"headingAtx\",\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n};\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  let content2;\n  let text2;\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content2 = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text2 = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      [\"enter\", content2, context],\n      [\"enter\", text2, context],\n      [\"exit\", text2, context],\n      [\"exit\", content2, context]\n    ]);\n  }\n  return events;\n}\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n  function start(code) {\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}\nconst htmlBlockNames = [\n  \"address\",\n  \"article\",\n  \"aside\",\n  \"base\",\n  \"basefont\",\n  \"blockquote\",\n  \"body\",\n  \"caption\",\n  \"center\",\n  \"col\",\n  \"colgroup\",\n  \"dd\",\n  \"details\",\n  \"dialog\",\n  \"dir\",\n  \"div\",\n  \"dl\",\n  \"dt\",\n  \"fieldset\",\n  \"figcaption\",\n  \"figure\",\n  \"footer\",\n  \"form\",\n  \"frame\",\n  \"frameset\",\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  \"h4\",\n  \"h5\",\n  \"h6\",\n  \"head\",\n  \"header\",\n  \"hr\",\n  \"html\",\n  \"iframe\",\n  \"legend\",\n  \"li\",\n  \"link\",\n  \"main\",\n  \"menu\",\n  \"menuitem\",\n  \"nav\",\n  \"noframes\",\n  \"ol\",\n  \"optgroup\",\n  \"option\",\n  \"p\",\n  \"param\",\n  \"search\",\n  \"section\",\n  \"summary\",\n  \"table\",\n  \"tbody\",\n  \"td\",\n  \"tfoot\",\n  \"th\",\n  \"thead\",\n  \"title\",\n  \"tr\",\n  \"track\",\n  \"ul\"\n];\nconst htmlRawNames = [\"pre\", \"script\", \"style\", \"textarea\"];\nconst htmlFlow = {\n  name: \"htmlFlow\",\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n};\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n};\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n};\nfunction resolveToHtmlFlow(events) {\n  let index2 = events.length;\n  while (index2--) {\n    if (events[index2][0] === \"enter\" && events[index2][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index2 > 1 && events[index2 - 2][1].type === \"linePrefix\") {\n    events[index2][1].start = events[index2 - 2][1].start;\n    events[index2 + 1][1].start = events[index2 - 2][1].start;\n    events.splice(index2 - 2, 2);\n  }\n  return events;\n}\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  let marker;\n  let closingTag;\n  let buffer;\n  let index2;\n  let markerB;\n  return start;\n  function start(code) {\n    return before(code);\n  }\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index2 = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index2++)) {\n      effects.consume(code);\n      if (index2 === value.length) {\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n  function completeAttributeName(code) {\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code);\n  }\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = \"\";\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    return ok(code);\n  }\n}\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}\nconst htmlText = {\n  name: \"htmlText\",\n  tokenize: tokenizeHtmlText\n};\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  let marker;\n  let index2;\n  let returnState;\n  return start;\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index2 = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index2++)) {\n      effects.consume(code);\n      return index2 === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n  function tagOpenAttributeName(code) {\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = void 0;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n  function lineEndingAfter(code) {\n    return markdownSpace(code) ? factorySpace(\n      effects,\n      lineEndingAfterPrefix,\n      \"linePrefix\",\n      self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4\n    )(code) : lineEndingAfterPrefix(code);\n  }\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}\nconst labelEnd = {\n  name: \"labelEnd\",\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n};\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\nfunction resolveAllLabelEnd(events) {\n  let index2 = -1;\n  while (++index2 < events.length) {\n    const token = events[index2][1];\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      events.splice(index2 + 1, token.type === \"labelImage\" ? 4 : 2);\n      token.type = \"data\";\n      index2++;\n    }\n  }\n  return events;\n}\nfunction resolveToLabelEnd(events, context) {\n  let index2 = events.length;\n  let offset = 0;\n  let token;\n  let open;\n  let close;\n  let media;\n  while (index2--) {\n    token = events[index2][1];\n    if (open) {\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n      if (events[index2][0] === \"enter\" && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index2][0] === \"enter\" && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index2;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index2;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  const label = {\n    type: \"label\",\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  };\n  const text2 = {\n    type: \"labelText\",\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  };\n  media = [\n    [\"enter\", group, context],\n    [\"enter\", label, context]\n  ];\n  media = push(media, events.slice(open + 1, open + offset + 3));\n  media = push(media, [[\"enter\", text2, context]]);\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  );\n  media = push(media, [\n    [\"exit\", text2, context],\n    events[close - 2],\n    events[close - 1],\n    [\"exit\", label, context]\n  ]);\n  media = push(media, events.slice(close + 1));\n  media = push(media, [[\"exit\", group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index2 = self.events.length;\n  let labelStart;\n  let defined;\n  while (index2--) {\n    if ((self.events[index2][1].type === \"labelImage\" || self.events[index2][1].type === \"labelLink\") && !self.events[index2][1]._balanced) {\n      labelStart = self.events[index2][1];\n      break;\n    }\n  }\n  return start;\n  function start(code) {\n    if (!labelStart) {\n      return nok(code);\n    }\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    );\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n  function after(code) {\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code);\n    }\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code);\n    }\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code);\n  }\n  function labelEndOk(code) {\n    return ok(code);\n  }\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      \"resourceDestination\",\n      \"resourceDestinationLiteral\",\n      \"resourceDestinationLiteralMarker\",\n      \"resourceDestinationRaw\",\n      \"resourceDestinationString\",\n      32\n    )(code);\n  }\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        \"resourceTitle\",\n        \"resourceTitleMarker\",\n        \"resourceTitleString\"\n      )(code);\n    }\n    return resourceEnd(code);\n  }\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      \"reference\",\n      \"referenceMarker\",\n      \"referenceString\"\n    )(code);\n  }\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    ) ? ok(code) : nok(code);\n  }\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n  function referenceCollapsedStart(code) {\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\nconst labelStartImage = {\n  name: \"labelStartImage\",\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n  function after(code) {\n    return code === 94 && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n  }\n}\nconst labelStartLink = {\n  name: \"labelStartLink\",\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n  function after(code) {\n    return code === 94 && \"_hiddenFootnoteSupport\" in self.parser.constructs ? nok(code) : ok(code);\n  }\n}\nconst lineEnding = {\n  name: \"lineEnding\",\n  tokenize: tokenizeLineEnding\n};\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}\nconst thematicBreak = {\n  name: \"thematicBreak\",\n  tokenize: tokenizeThematicBreak\n};\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  let marker;\n  return start;\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    return before(code);\n  }\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}\nconst list = {\n  name: \"list\",\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n};\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n};\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    );\n  }\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = void 0;\n  return effects.check(blankLine, onBlank, notBlank);\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n    return factorySpace(\n      effects,\n      ok,\n      \"listItemIndent\",\n      self.containerState.size + 1\n    )(code);\n  }\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = void 0;\n      self.containerState.initialBlankLine = void 0;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = void 0;\n    self.containerState.initialBlankLine = void 0;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n  function notInCurrentItem(code) {\n    self.containerState._closeFlow = true;\n    self.interrupt = void 0;\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      \"linePrefix\",\n      self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4\n    )(code);\n  }\n}\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(\n    effects,\n    afterPrefix,\n    \"listItemIndent\",\n    self.containerState.size + 1\n  );\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n  return factorySpace(\n    effects,\n    afterPrefix,\n    \"listItemPrefixWhitespace\",\n    self.parser.constructs.disable.null.includes(\"codeIndented\") ? void 0 : 4 + 1\n  );\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}\nconst setextUnderline = {\n  name: \"setextUnderline\",\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n};\nfunction resolveToSetextUnderline(events, context) {\n  let index2 = events.length;\n  let content2;\n  let text2;\n  let definition2;\n  while (index2--) {\n    if (events[index2][0] === \"enter\") {\n      if (events[index2][1].type === \"content\") {\n        content2 = index2;\n        break;\n      }\n      if (events[index2][1].type === \"paragraph\") {\n        text2 = index2;\n      }\n    } else {\n      if (events[index2][1].type === \"content\") {\n        events.splice(index2, 1);\n      }\n      if (!definition2 && events[index2][1].type === \"definition\") {\n        definition2 = index2;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: Object.assign({}, events[text2][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  events[text2][1].type = \"setextHeadingText\";\n  if (definition2) {\n    events.splice(text2, 0, [\"enter\", heading, context]);\n    events.splice(definition2 + 1, 0, [\"exit\", events[content2][1], context]);\n    events[content2][1].end = Object.assign({}, events[definition2][1].end);\n  } else {\n    events[content2][1] = heading;\n  }\n  events.push([\"exit\", heading, context]);\n  return events;\n}\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  let marker;\n  return start;\n  function start(code) {\n    let index2 = self.events.length;\n    let paragraph;\n    while (index2--) {\n      if (self.events[index2][1].type !== \"lineEnding\" && self.events[index2][1].type !== \"linePrefix\" && self.events[index2][1].type !== \"content\") {\n        paragraph = self.events[index2][1].type === \"paragraph\";\n        break;\n      }\n    }\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\nconst flow$1 = {\n  tokenize: initializeFlow\n};\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        \"linePrefix\"\n      )\n    )\n  );\n  return initial;\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = void 0;\n    return initial;\n  }\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = void 0;\n    return initial;\n  }\n}\nconst resolver = {\n  resolveAll: createResolver()\n};\nconst string$1 = initializeFactory(\"string\");\nconst text$1 = initializeFactory(\"text\");\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === \"text\" ? resolveAllLineSuffixes : void 0\n    )\n  };\n  function initializeText(effects) {\n    const self = this;\n    const constructs2 = this.parser.constructs[field];\n    const text2 = effects.attempt(constructs2, start, notText);\n    return start;\n    function start(code) {\n      return atBreak(code) ? text2(code) : notText(code);\n    }\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text2(code);\n      }\n      effects.consume(code);\n      return data;\n    }\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list2 = constructs2[code];\n      let index2 = -1;\n      if (list2) {\n        while (++index2 < list2.length) {\n          const item = list2[index2];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n  function resolveAllText(events, context) {\n    let index2 = -1;\n    let enter;\n    while (++index2 <= events.length) {\n      if (enter === void 0) {\n        if (events[index2] && events[index2][1].type === \"data\") {\n          enter = index2;\n          index2++;\n        }\n      } else if (!events[index2] || events[index2][1].type !== \"data\") {\n        if (index2 !== enter + 2) {\n          events[enter][1].end = events[index2 - 1][1].end;\n          events.splice(enter + 2, index2 - enter - 2);\n          index2 = enter + 2;\n        }\n        enter = void 0;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0;\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index2 = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      let tabs;\n      while (index2--) {\n        const chunk = chunks[index2];\n        if (typeof chunk === \"string\") {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex)\n            break;\n          bufferIndex = -1;\n        } else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1)\n          ;\n        else {\n          index2++;\n          break;\n        }\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index2,\n            _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        };\n        data.end = Object.assign({}, token.start);\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            [\"enter\", token, context],\n            [\"exit\", token, context]\n          );\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}\nfunction createTokenizer(parser, initialize, from) {\n  let point2 = Object.assign(\n    from ? Object.assign({}, from) : {\n      line: 1,\n      column: 1,\n      offset: 0\n    },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  );\n  const columnStart = {};\n  const resolveAllConstructs = [];\n  let chunks = [];\n  let stack = [];\n  const effects = {\n    consume,\n    enter,\n    exit: exit2,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n  let state = initialize.tokenize.call(context, effects);\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  function now() {\n    const { line, column, offset, _index, _bufferIndex } = point2;\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    };\n  }\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n  function main() {\n    let chunkIndex;\n    while (point2._index < chunks.length) {\n      const chunk = chunks[point2._index];\n      if (typeof chunk === \"string\") {\n        chunkIndex = point2._index;\n        if (point2._bufferIndex < 0) {\n          point2._bufferIndex = 0;\n        }\n        while (point2._index === chunkIndex && point2._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point2._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  function go(code) {\n    state = state(code);\n  }\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point2.line++;\n      point2.column = 1;\n      point2.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point2.column++;\n      point2.offset++;\n    }\n    if (point2._bufferIndex < 0) {\n      point2._index++;\n    } else {\n      point2._bufferIndex++;\n      if (point2._bufferIndex === chunks[point2._index].length) {\n        point2._bufferIndex = -1;\n        point2._index++;\n      }\n    }\n    context.previous = code;\n  }\n  function enter(type, fields) {\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push([\"enter\", token, context]);\n    stack.push(token);\n    return token;\n  }\n  function exit2(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push([\"exit\", token, context]);\n    return token;\n  }\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  function constructFactory(onreturn, fields) {\n    return hook;\n    function hook(constructs2, returnState, bogusState) {\n      let listOfConstructs;\n      let constructIndex;\n      let currentConstruct;\n      let info;\n      return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : \"tokenize\" in constructs2 ? (\n        // @ts-expect-error Looks like a construct.\n        handleListOfConstructs([constructs2])\n      ) : handleMapOfConstructs(constructs2);\n      function handleMapOfConstructs(map) {\n        return start;\n        function start(code) {\n          const def = code !== null && map[code];\n          const all2 = code !== null && map.null;\n          const list2 = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...Array.isArray(def) ? def : def ? [def] : [],\n            ...Array.isArray(all2) ? all2 : all2 ? [all2] : []\n          ];\n          return handleListOfConstructs(list2)(code);\n        }\n      }\n      function handleListOfConstructs(list2) {\n        listOfConstructs = list2;\n        constructIndex = 0;\n        if (list2.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list2[constructIndex]);\n      }\n      function handleConstruct(construct) {\n        return start;\n        function start(code) {\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok();\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code);\n        }\n      }\n      function ok(code) {\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      function nok(code) {\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n  function addResult(construct, from2) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from2,\n        context.events.length - from2,\n        construct.resolve(context.events.slice(from2), context)\n      );\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n    function restore() {\n      point2 = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n  function accountForPotentialSkip() {\n    if (point2.line in columnStart && point2.column < 2) {\n      point2.column = columnStart[point2.line];\n      point2.offset += columnStart[point2.line] - 1;\n    }\n  }\n}\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  let view;\n  if (startIndex === endIndex) {\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === \"string\") {\n        view[0] = head.slice(startBufferIndex);\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\nfunction serializeChunks(chunks, expandTabs) {\n  let index2 = -1;\n  const result = [];\n  let atTab;\n  while (++index2 < chunks.length) {\n    const chunk = chunks[index2];\n    let value;\n    if (typeof chunk === \"string\") {\n      value = chunk;\n    } else\n      switch (chunk) {\n        case -5: {\n          value = \"\\r\";\n          break;\n        }\n        case -4: {\n          value = \"\\n\";\n          break;\n        }\n        case -3: {\n          value = \"\\r\\n\";\n          break;\n        }\n        case -2: {\n          value = expandTabs ? \" \" : \"\t\";\n          break;\n        }\n        case -1: {\n          if (!expandTabs && atTab)\n            continue;\n          value = \" \";\n          break;\n        }\n        default: {\n          value = String.fromCharCode(chunk);\n        }\n      }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join(\"\");\n}\nconst document$1 = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\nconst contentInitial = {\n  [91]: definition\n};\nconst flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\nconst flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\nconst string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\nconst text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\nconst insideSpan = {\n  null: [attention, resolver]\n};\nconst attentionMarkers = {\n  null: [42, 95]\n};\nconst disable = {\n  null: []\n};\nconst defaultConstructs = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  attentionMarkers,\n  contentInitial,\n  disable,\n  document: document$1,\n  flow,\n  flowInitial,\n  insideSpan,\n  string,\n  text\n}, Symbol.toStringTag, { value: \"Module\" }));\nfunction parse(options) {\n  const settings = options || {};\n  const constructs2 = (\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...settings.extensions || []])\n  );\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs: constructs2,\n    content: create(content$1),\n    document: create(document$2),\n    flow: create(flow$1),\n    string: create(string$1),\n    text: create(text$1)\n  };\n  return parser;\n  function create(initial) {\n    return creator;\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}\nconst search = /[\\0\\t\\n\\r]/g;\nfunction preprocess() {\n  let column = 1;\n  let buffer = \"\";\n  let start = true;\n  let atCarriageReturn;\n  return preprocessor;\n  function preprocessor(value, encoding, end) {\n    const chunks = [];\n    let match;\n    let next;\n    let startPosition;\n    let endPosition;\n    let code;\n    value = buffer + value.toString(encoding);\n    startPosition = 0;\n    buffer = \"\";\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = void 0;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== void 0 ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = void 0;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = void 0;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533);\n            column++;\n            break;\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4;\n            chunks.push(-2);\n            while (column++ < next)\n              chunks.push(-1);\n            break;\n          }\n          case 10: {\n            chunks.push(-4);\n            column = 1;\n            break;\n          }\n          default: {\n            atCarriageReturn = true;\n            column = 1;\n          }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn)\n        chunks.push(-5);\n      if (buffer)\n        chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}\nfunction postprocess(events) {\n  while (!subtokenize(events)) {\n  }\n  return events;\n}\nfunction decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 || code === 11 || code > 13 && code < 32 || // Control character (DEL) of C0, and C1 controls.\n    code > 126 && code < 160 || // Lone high surrogates and low surrogates.\n    code > 55295 && code < 57344 || // Noncharacters.\n    code > 64975 && code < 65008 || (code & 65535) === 65535 || (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return \"�\";\n  }\n  return String.fromCharCode(code);\n}\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\nfunction decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\nfunction decode($0, $1, $2) {\n  if ($1) {\n    return $1;\n  }\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head2 = $2.charCodeAt(1);\n    const hex = head2 === 120 || head2 === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}\nfunction stringifyPosition(value) {\n  if (!value || typeof value !== \"object\") {\n    return \"\";\n  }\n  if (\"position\" in value || \"type\" in value) {\n    return position(value.position);\n  }\n  if (\"start\" in value || \"end\" in value) {\n    return position(value);\n  }\n  if (\"line\" in value || \"column\" in value) {\n    return point$1(value);\n  }\n  return \"\";\n}\nfunction point$1(point2) {\n  return index(point2 && point2.line) + \":\" + index(point2 && point2.column);\n}\nfunction position(pos) {\n  return point$1(pos && pos.start) + \"-\" + point$1(pos && pos.end);\n}\nfunction index(value) {\n  return value && typeof value === \"number\" ? value : 1;\n}\nconst own = {}.hasOwnProperty;\nconst fromMarkdown = (\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function(value, encoding, options) {\n    if (typeof encoding !== \"string\") {\n      options = encoding;\n      encoding = void 0;\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    );\n  }\n);\nfunction compiler(options) {\n  const config = {\n    transforms: [],\n    canContainEols: [\"emphasis\", \"fragment\", \"heading\", \"paragraph\", \"strong\"],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote2),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText2, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition2),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list2, onenterlistordered),\n      listUnordered: opener(list2),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak2)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n  const data = {};\n  return compile;\n  function compile(events) {\n    let tree = {\n      type: \"root\",\n      children: []\n    };\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit: exit2,\n      buffer,\n      resume,\n      setData,\n      getData\n    };\n    const listStack = [];\n    let index2 = -1;\n    while (++index2 < events.length) {\n      if (events[index2][1].type === \"listOrdered\" || events[index2][1].type === \"listUnordered\") {\n        if (events[index2][0] === \"enter\") {\n          listStack.push(index2);\n        } else {\n          const tail = listStack.pop();\n          index2 = prepareList(events, tail, index2);\n        }\n      }\n    }\n    index2 = -1;\n    while (++index2 < events.length) {\n      const handler = config[events[index2][0]];\n      if (own.call(handler, events[index2][1].type)) {\n        handler[events[index2][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index2][2].sliceSerialize\n            },\n            context\n          ),\n          events[index2][1]\n        );\n      }\n    }\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, void 0, tail[0]);\n    }\n    tree.position = {\n      start: point(\n        events.length > 0 ? events[0][1].start : {\n          line: 1,\n          column: 1,\n          offset: 0\n        }\n      ),\n      end: point(\n        events.length > 0 ? events[events.length - 2][1].end : {\n          line: 1,\n          column: 1,\n          offset: 0\n        }\n      )\n    };\n    index2 = -1;\n    while (++index2 < config.transforms.length) {\n      tree = config.transforms[index2](tree) || tree;\n    }\n    return tree;\n  }\n  function prepareList(events, start, length) {\n    let index2 = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    let listItem2;\n    let lineIndex;\n    let firstBlankLineIndex;\n    let atMarker;\n    while (++index2 <= length) {\n      const event = events[index2];\n      if (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\" || event[1].type === \"blockQuote\") {\n        if (event[0] === \"enter\") {\n          containerBalance++;\n        } else {\n          containerBalance--;\n        }\n        atMarker = void 0;\n      } else if (event[1].type === \"lineEndingBlank\") {\n        if (event[0] === \"enter\") {\n          if (listItem2 && !atMarker && !containerBalance && !firstBlankLineIndex) {\n            firstBlankLineIndex = index2;\n          }\n          atMarker = void 0;\n        }\n      } else if (event[1].type === \"linePrefix\" || event[1].type === \"listItemValue\" || event[1].type === \"listItemMarker\" || event[1].type === \"listItemPrefix\" || event[1].type === \"listItemPrefixWhitespace\")\n        ;\n      else {\n        atMarker = void 0;\n      }\n      if (!containerBalance && event[0] === \"enter\" && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === \"exit\" && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem2) {\n          let tailIndex = index2;\n          lineIndex = void 0;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === \"exit\")\n                continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\")\n              ;\n            else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem2._spread = true;\n          }\n          listItem2.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          );\n          events.splice(lineIndex || index2, 0, [\"exit\", listItem2, event[2]]);\n          index2++;\n          length++;\n        }\n        if (event[1].type === \"listItemPrefix\") {\n          listItem2 = {\n            type: \"listItem\",\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: void 0\n          };\n          events.splice(index2, 0, [\"enter\", listItem2, event[2]]);\n          index2++;\n          length++;\n          firstBlankLineIndex = void 0;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n  function setData(key, value) {\n    data[key] = value;\n  }\n  function getData(key) {\n    return data[key];\n  }\n  function opener(create, and) {\n    return open;\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and)\n        and.call(this, token);\n    }\n  }\n  function buffer() {\n    this.stack.push({\n      type: \"fragment\",\n      children: []\n    });\n  }\n  function enter(node2, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    parent.children.push(node2);\n    this.stack.push(node2);\n    this.tokenStack.push([token, errorHandler]);\n    node2.position = {\n      start: point(token.start)\n    };\n    return node2;\n  }\n  function closer(and) {\n    return close;\n    function close(token) {\n      if (and)\n        and.call(this, token);\n      exit2.call(this, token);\n    }\n  }\n  function exit2(token, onExitError) {\n    const node2 = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error(\n        \"Cannot close `\" + token.type + \"` (\" + stringifyPosition({\n          start: token.start,\n          end: token.end\n        }) + \"): it’s not open\"\n      );\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node2.position.end = point(token.end);\n    return node2;\n  }\n  function resume() {\n    return toString(this.stack.pop());\n  }\n  function onenterlistordered() {\n    setData(\"expectingFirstListItemValue\", true);\n  }\n  function onenterlistitemvalue(token) {\n    if (getData(\"expectingFirstListItemValue\")) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      setData(\"expectingFirstListItemValue\");\n    }\n  }\n  function onexitcodefencedfenceinfo() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.lang = data2;\n  }\n  function onexitcodefencedfencemeta() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.meta = data2;\n  }\n  function onexitcodefencedfence() {\n    if (getData(\"flowCodeInside\"))\n      return;\n    this.buffer();\n    setData(\"flowCodeInside\", true);\n  }\n  function onexitcodefenced() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.value = data2.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, \"\");\n    setData(\"flowCodeInside\");\n  }\n  function onexitcodeindented() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.value = data2.replace(/(\\r?\\n|\\r)$/g, \"\");\n  }\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.label = label;\n    node2.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase();\n  }\n  function onexitdefinitiontitlestring() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.title = data2;\n  }\n  function onexitdefinitiondestinationstring() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.url = data2;\n  }\n  function onexitatxheadingsequence(token) {\n    const node2 = this.stack[this.stack.length - 1];\n    if (!node2.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node2.depth = depth;\n    }\n  }\n  function onexitsetextheadingtext() {\n    setData(\"setextHeadingSlurpLineEnding\", true);\n  }\n  function onexitsetextheadinglinesequence(token) {\n    const node2 = this.stack[this.stack.length - 1];\n    node2.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n  }\n  function onexitsetextheading() {\n    setData(\"setextHeadingSlurpLineEnding\");\n  }\n  function onenterdata(token) {\n    const node2 = this.stack[this.stack.length - 1];\n    let tail = node2.children[node2.children.length - 1];\n    if (!tail || tail.type !== \"text\") {\n      tail = text2();\n      tail.position = {\n        start: point(token.start)\n      };\n      node2.children.push(tail);\n    }\n    this.stack.push(tail);\n  }\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    if (getData(\"atHardBreak\")) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      setData(\"atHardBreak\");\n      return;\n    }\n    if (!getData(\"setextHeadingSlurpLineEnding\") && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n  function onexithardbreak() {\n    setData(\"atHardBreak\", true);\n  }\n  function onexithtmlflow() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.value = data2;\n  }\n  function onexithtmltext() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.value = data2;\n  }\n  function onexitcodetext() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.value = data2;\n  }\n  function onexitlink() {\n    const node2 = this.stack[this.stack.length - 1];\n    if (getData(\"inReference\")) {\n      const referenceType = getData(\"referenceType\") || \"shortcut\";\n      node2.type += \"Reference\";\n      node2.referenceType = referenceType;\n      delete node2.url;\n      delete node2.title;\n    } else {\n      delete node2.identifier;\n      delete node2.label;\n    }\n    setData(\"referenceType\");\n  }\n  function onexitimage() {\n    const node2 = this.stack[this.stack.length - 1];\n    if (getData(\"inReference\")) {\n      const referenceType = getData(\"referenceType\") || \"shortcut\";\n      node2.type += \"Reference\";\n      node2.referenceType = referenceType;\n      delete node2.url;\n      delete node2.title;\n    } else {\n      delete node2.identifier;\n      delete node2.label;\n    }\n    setData(\"referenceType\");\n  }\n  function onexitlabeltext(token) {\n    const string2 = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    ancestor.label = decodeString(string2);\n    ancestor.identifier = normalizeIdentifier(string2).toLowerCase();\n  }\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    setData(\"inReference\", true);\n    if (node2.type === \"link\") {\n      const children = fragment.children;\n      node2.children = children;\n    } else {\n      node2.alt = value;\n    }\n  }\n  function onexitresourcedestinationstring() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.url = data2;\n  }\n  function onexitresourcetitlestring() {\n    const data2 = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.title = data2;\n  }\n  function onexitresource() {\n    setData(\"inReference\");\n  }\n  function onenterreference() {\n    setData(\"referenceType\", \"collapsed\");\n  }\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node2 = this.stack[this.stack.length - 1];\n    node2.label = label;\n    node2.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase();\n    setData(\"referenceType\", \"full\");\n  }\n  function onexitcharacterreferencemarker(token) {\n    setData(\"characterReferenceType\", token.type);\n  }\n  function onexitcharacterreferencevalue(token) {\n    const data2 = this.sliceSerialize(token);\n    const type = getData(\"characterReferenceType\");\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data2,\n        type === \"characterReferenceMarkerNumeric\" ? 10 : 16\n      );\n      setData(\"characterReferenceType\");\n    } else {\n      const result = decodeNamedCharacterReference(data2);\n      value = result;\n    }\n    const tail = this.stack.pop();\n    tail.value += value;\n    tail.position.end = point(token.end);\n  }\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node2 = this.stack[this.stack.length - 1];\n    node2.url = this.sliceSerialize(token);\n  }\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node2 = this.stack[this.stack.length - 1];\n    node2.url = \"mailto:\" + this.sliceSerialize(token);\n  }\n  function blockQuote2() {\n    return {\n      type: \"blockquote\",\n      children: []\n    };\n  }\n  function codeFlow() {\n    return {\n      type: \"code\",\n      lang: null,\n      meta: null,\n      value: \"\"\n    };\n  }\n  function codeText2() {\n    return {\n      type: \"inlineCode\",\n      value: \"\"\n    };\n  }\n  function definition2() {\n    return {\n      type: \"definition\",\n      identifier: \"\",\n      label: null,\n      title: null,\n      url: \"\"\n    };\n  }\n  function emphasis() {\n    return {\n      type: \"emphasis\",\n      children: []\n    };\n  }\n  function heading() {\n    return {\n      type: \"heading\",\n      depth: void 0,\n      children: []\n    };\n  }\n  function hardBreak() {\n    return {\n      type: \"break\"\n    };\n  }\n  function html() {\n    return {\n      type: \"html\",\n      value: \"\"\n    };\n  }\n  function image() {\n    return {\n      type: \"image\",\n      title: null,\n      url: \"\",\n      alt: null\n    };\n  }\n  function link() {\n    return {\n      type: \"link\",\n      title: null,\n      url: \"\",\n      children: []\n    };\n  }\n  function list2(token) {\n    return {\n      type: \"list\",\n      ordered: token.type === \"listOrdered\",\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n  function listItem(token) {\n    return {\n      type: \"listItem\",\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n  function paragraph() {\n    return {\n      type: \"paragraph\",\n      children: []\n    };\n  }\n  function strong() {\n    return {\n      type: \"strong\",\n      children: []\n    };\n  }\n  function text2() {\n    return {\n      type: \"text\",\n      value: \"\"\n    };\n  }\n  function thematicBreak2() {\n    return {\n      type: \"thematicBreak\"\n    };\n  }\n}\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\nfunction configure(combined, extensions) {\n  let index2 = -1;\n  while (++index2 < extensions.length) {\n    const value = extensions[index2];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\nfunction extension(combined, extension2) {\n  let key;\n  for (key in extension2) {\n    if (own.call(extension2, key)) {\n      if (key === \"canContainEols\") {\n        const right = extension2[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === \"transforms\") {\n        const right = extension2[key];\n        if (right) {\n          combined[key].push(...right);\n        }\n      } else if (key === \"enter\" || key === \"exit\") {\n        const right = extension2[key];\n        if (right) {\n          Object.assign(combined[key], right);\n        }\n      }\n    }\n  }\n}\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      \"Cannot close `\" + left.type + \"` (\" + stringifyPosition({\n        start: left.start,\n        end: left.end\n      }) + \"): a different token (`\" + right.type + \"`, \" + stringifyPosition({\n        start: right.start,\n        end: right.end\n      }) + \") is open\"\n    );\n  } else {\n    throw new Error(\n      \"Cannot close document, a token (`\" + right.type + \"`, \" + stringifyPosition({\n        start: right.start,\n        end: right.end\n      }) + \") is still open\"\n    );\n  }\n}\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node2, parentType = \"normal\") {\n    if (node2.type === \"text\") {\n      const textLines = node2.value.split(\"\\n\");\n      textLines.forEach((textLine, index2) => {\n        if (index2 !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node2.type === \"strong\" || node2.type === \"emphasis\") {\n      node2.children.forEach((contentNode) => {\n        processNode(contentNode, node2.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node2) {\n    if (node2.type === \"text\") {\n      return node2.value.replace(/\\n/g, \"<br/>\");\n    } else if (node2.type === \"strong\") {\n      return `<strong>${node2.children.map(output).join(\"\")}</strong>`;\n    } else if (node2.type === \"emphasis\") {\n      return `<em>${node2.children.map(output).join(\"\")}</em>`;\n    } else if (node2.type === \"paragraph\") {\n      return `<p>${node2.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node2.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text2) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text2)].map((s) => s.segment);\n  }\n  return [...text2];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content: content2 }) => content2.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element2, node2, width, classes, addBackground = false) {\n  const fo = element2.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node2.label;\n  const labelClass = node2.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node2.labelStyle ? 'style=\"' + node2.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node2.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text2) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text2, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index2) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index2 === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text2 = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text2, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText2 = markdownToHTML(text2);\n    const node2 = {\n      isNode,\n      label: decodeEntities(htmlText2).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node2, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text2);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],
  "mappings": "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",
  "names": []
}
